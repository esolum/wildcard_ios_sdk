// Generated by Swift version 1.1 (swift-600.0.57.4)
#pragma clang diagnostic push

#if defined(__has_include) && __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <objc/NSObject.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if defined(__has_include) && __has_include(<uchar.h>)
# include <uchar.h>
#elif !defined(__cplusplus) || __cplusplus < 201103L
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
#endif

typedef struct _NSZone NSZone;

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif

#if defined(__has_attribute) && __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if defined(__has_attribute) && __has_attribute(objc_subclassing_restricted) 
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if defined(__has_attribute) && __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if defined(__has_feature) && __has_feature(modules)
@import ObjectiveC;
@import CoreGraphics;
@import UIKit;
@import Foundation;
@import WebKit;
#endif

#import <WildcardSDK/WildcardSDK.h>

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
@class NSURL;
@class NSError;


/// Card base class
SWIFT_CLASS("_TtC11WildcardSDK4Card")
@interface Card : NSObject

/// Associated web url for this card
@property (nonatomic, readonly) NSURL * webUrl;
@property (nonatomic, readonly, copy) NSString * cardType;
@property (nonatomic, readonly) WCCardType type;
+ (WCCardType)cardTypeFromString:(NSString *)name;
+ (NSString *)stringFromCardType:(WCCardType)type;

/// Gets a card from the specified URL
+ (void)getFromUrl:(NSURL *)url completion:(void (^)(Card *, NSError *))completion;
- (BOOL)supportsLayout:(WCCardLayout)layout;
@end

@class Creator;
@class NSDate;
@class NSDictionary;


/// Article Card
SWIFT_CLASS("_TtC11WildcardSDK11ArticleCard")
@interface ArticleCard : Card
@property (nonatomic, readonly, copy) NSString * title;
@property (nonatomic, readonly) Creator * creator;
@property (nonatomic, readonly, copy) NSString * abstractContent;
@property (nonatomic, readonly, copy) NSArray * keywords;
@property (nonatomic, readonly, copy) NSString * html;
@property (nonatomic, readonly) NSDate * publicationDate;
@property (nonatomic, readonly, copy) NSString * source;
@property (nonatomic, readonly, copy) NSString * author;
@property (nonatomic, readonly) NSDate * updatedDate;
@property (nonatomic, readonly) NSDictionary * media;
@property (nonatomic, readonly) NSURL * appLinkAndroid;
@property (nonatomic, readonly) NSURL * appLinkIos;
@property (nonatomic, readonly) NSURL * primaryImageURL;
- (instancetype)initWithTitle:(NSString *)title abstractContent:(NSString *)abstractContent url:(NSURL *)url creator:(Creator *)creator data:(NSDictionary *)data OBJC_DESIGNATED_INITIALIZER;
- (BOOL)supportsLayout:(WCCardLayout)layout;
@end

@class CardViewElement;


/// The visual source of a CardView.
///
/// Every CardView is associated with a visual source to provide layout guidelines as well as views for various subcomponents. If you choose to completely customize a card, you will have to implement a visual source of your own. 
///
/// Each subcomponent of a CardView must extend CardViewElement.
SWIFT_PROTOCOL("_TtP11WildcardSDK20CardViewVisualSource_")
@protocol CardViewVisualSource

/// CardViewElement for the card body
- (CardViewElement *)viewForCardBody;
@optional

/// Optional CardViewElement for header
- (CardViewElement *)viewForCardHeader;

/// Optional CardViewElement for footer
- (CardViewElement *)viewForCardFooter;

/// ALPHA: Optional CardViewElement for the back of the card. Spans the full card, shown on double tap
- (CardViewElement *)viewForBackOfCard;
@end



/// DO NOT instantiate. You may derive from this if you are customizing your own visual source.
SWIFT_CLASS("_TtC11WildcardSDK16BaseVisualSource")
@interface BaseVisualSource

/// Initiailize with backing card and card margin to screen bounds
- (instancetype)initWithCard:(Card *)card OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC11WildcardSDK30ArticleCardNoImageVisualSource")
@interface ArticleCardNoImageVisualSource : BaseVisualSource <CardViewVisualSource>
- (CardViewElement *)viewForCardHeader;
- (CardViewElement *)viewForCardBody;
- (CardViewElement *)viewForCardFooter;
- (instancetype)initWithCard:(Card *)card OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC11WildcardSDK28ArticleCardShortVisualSource")
@interface ArticleCardShortVisualSource : BaseVisualSource <CardViewVisualSource>
- (CardViewElement *)viewForCardHeader;
- (CardViewElement *)viewForCardBody;
- (CardViewElement *)viewForCardFooter;
- (instancetype)initWithCard:(Card *)card OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC11WildcardSDK27ArticleCardTallVisualSource")
@interface ArticleCardTallVisualSource : BaseVisualSource <CardViewVisualSource>
- (instancetype)initWithCard:(Card *)card aspectRatio:(CGFloat)aspectRatio OBJC_DESIGNATED_INITIALIZER;
- (CardViewElement *)viewForCardHeader;
- (CardViewElement *)viewForCardBody;
- (CardViewElement *)viewForCardFooter;
@end



@class CardView;
@protocol CardPhysicsDelegate;

SWIFT_CLASS("_TtC11WildcardSDK11CardPhysics")
@interface CardPhysics : NSObject
@property (nonatomic) CardView * cardView;
@property (nonatomic) id <CardPhysicsDelegate> delegate;
@property (nonatomic) BOOL enableDragging;
@end


SWIFT_PROTOCOL("_TtP11WildcardSDK19CardPhysicsDelegate_")
@protocol CardPhysicsDelegate
@optional
- (void)cardViewDragged:(CardView *)cardView position:(CGPoint)position;
- (void)cardViewDropped:(CardView *)cardView position:(CGPoint)position;
@end

@protocol CardViewDelegate;
@class NSCoder;

SWIFT_CLASS("_TtC11WildcardSDK8CardView")
@interface CardView : UIView

/// ALPHA: See CardPhysics
@property (nonatomic) CardPhysics * physics;

/// See CardViewDelegate
@property (nonatomic) id <CardViewDelegate> delegate;

/// The visual source associated with this CardView
@property (nonatomic) id <CardViewVisualSource> visualSource;

/// The backing card for this CardView
@property (nonatomic) Card * backingCard;

/// Preferred width for the CardView. When a CardView lays out its subcomponents from a visual source, each subcomponent will also be assigned this preferred width.
///
/// Changing the preferredWidth for the CardView will affect the intrinsic size of the subcomponents and the CardView itself.
@property (nonatomic) CGFloat preferredWidth;

/// Creates a CardView from a card. A layout will be chosen and the CardView will be returned with a default size.
+ (CardView *)createCardView:(Card *)card;

/// Creates a CardView from a card with a prechosen layout. The CardView will be returned with a default size.
+ (CardView *)createCardView:(Card *)card layout:(WCCardLayout)layout;

/// Creates a CardView from a card with a prechosen layout and width. 
///
/// The card's size will be calculated optimally from the preferredWidth. You may choose various layouts and widths to a get a height that is suitable.
+ (CardView *)createCardView:(Card *)card layout:(WCCardLayout)layout preferredWidth:(CGFloat)preferredWidth;

/// Creates a CardView with a customized visual source. See tutorials on how to create your own visual source.
///
/// Passing in UIViewNoIntrinsicMetric for the width will result in a default width calculation based on screen size
+ (CardView *)createCardView:(Card *)card visualSource:(id <CardViewVisualSource>)visualSource preferredWidth:(CGFloat)preferredWidth;

/// ALPHA: Reloads the CardView with a new card. Autogenerates a layout
- (void)reloadWithCard:(Card *)newCard;

/// ALPHA: Reloads the CardView with a new card and specified layout.
- (void)reloadWithCard:(Card *)newCard layout:(WCCardLayout)layout;

/// ALPHA: Reloads the CardView with a new card, specified layout, and preferredWidth.
- (void)reloadWithCard:(Card *)newCard layout:(WCCardLayout)layout preferredWidth:(CGFloat)preferredWidth;

/// ALPHA: Reloads the CardView with a new card, custom visual source, and preferredWidth
- (void)reloadWithCard:(Card *)newCard visualSource:(id <CardViewVisualSource>)visualSource preferredWidth:(CGFloat)preferredWidth;
- (void)fadeOut:(NSTimeInterval)duration delay:(NSTimeInterval)delay completion:(void (^)(BOOL))completion;
- (void)fadeIn:(NSTimeInterval)duration delay:(NSTimeInterval)delay completion:(void (^)(BOOL))completion;
- (instancetype)initWithCoder:(NSCoder *)coder OBJC_DESIGNATED_INITIALIZER;
- (void)didMoveToSuperview;
- (void)awakeFromNib;
- (void)layoutSubviews;
- (CGSize)intrinsicContentSize;
@end


SWIFT_CLASS("_TtC11WildcardSDK14CardViewAction")
@interface CardViewAction

/// Any parameters for the card action. e.g. for a WCCardAction.ViewOnWeb, there is a url parameter
@property (nonatomic, readonly) NSDictionary * parameters;

/// Action type. See WCCardAction
@property (nonatomic, readonly) WCCardAction type;

/// Init
- (instancetype)initWithType:(WCCardAction)type parameters:(NSDictionary *)parameters OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_PROTOCOL("_TtP11WildcardSDK16CardViewDelegate_")
@protocol CardViewDelegate
@optional

/// Simply just a hook into UIView.layoutSubviews() for the CardView
- (void)cardViewLayoutSubviews:(CardView *)cardView;

/// CardView has been requested to perform a specific action.
- (void)cardViewRequestedAction:(CardView *)cardView action:(CardViewAction *)action;

/// CardView is about to be reloaded.
- (void)cardViewWillReload:(CardView *)cardView;

/// CardView has reloaded.
- (void)cardViewDidReload:(CardView *)cardView;
@end



/// The basic subcomponent of a CardView
SWIFT_CLASS("_TtC11WildcardSDK15CardViewElement")
@interface CardViewElement : UIView

/// Reference to the parent CardView of the CardViewElement. Nil if this element has not been added to any CardView yet.
@property (nonatomic) CardView * cardView;

/// Preferred width for the CardViewElement. Returns UIViewNoIntrinsicMetric if no preferred width is set.
///
/// Similar to UILabel.preferredMaxLayoutWidth, this width and is used in conjunction with optimizedHeight() to determine the intrinsic size of the CardViewElement
@property (nonatomic) CGFloat preferredWidth;

/// Return an optimized height for the CardViewElement based on a given width.
///
/// This function should be overriden to provide a proper intrinsic size for this CardViewElement. This height also affects the intrinsic size of a CardView if this element has been added to one
- (CGFloat)optimizedHeight:(CGFloat)cardWidth;

/// Update the CardViewElement with the given card.
///
/// This always happens before a final layout pass so you should not make any assumptions about frames or sizes during this call.
- (void)update:(Card *)card;

/// The preferred width of the card view element has just been updated, make any necessary adjustments
///
/// e.g. Resassign a UILabel's preferredMaxLayoutWidth if it depends on the CardViewElement's preferredWidth
- (void)adjustForPreferredWidth:(CGFloat)cardWidth;
- (CGSize)intrinsicContentSize;

/// Called automatically on init() or awakeFromNib()
- (void)initialize;
- (instancetype)initWithCoder:(NSCoder *)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (void)awakeFromNib;
@end


SWIFT_CLASS("_TtC11WildcardSDK22CardViewElementFactory")
@interface CardViewElementFactory

/// Creates a CardViewElement from WCElementType. You may not make any assumptions about the size after this call.
///
/// Use only for initialization
+ (CardViewElement *)createCardViewElement:(WCElementType)type;
@end




/// Creator of a Card
///
/// Any entity that owns Card content. This may be a company, specific website, or individual.
SWIFT_CLASS("_TtC11WildcardSDK7Creator")
@interface Creator
@property (nonatomic, readonly, copy) NSString * name;
@property (nonatomic, readonly) NSURL * url;
@property (nonatomic, readonly) NSURL * favicon;
@property (nonatomic, readonly) NSURL * iosAppStoreUrl;
@property (nonatomic, readonly) NSURL * androidAppStoreUrl;
- (instancetype)initWithName:(NSString *)name url:(NSURL *)url favicon:(NSURL *)favicon iosStore:(NSURL *)iosStore androidStore:(NSURL *)androidStore OBJC_DESIGNATED_INITIALIZER;
@end

@class UILabel;

SWIFT_CLASS("_TtC11WildcardSDK14FullCardHeader")
@interface FullCardHeader : CardViewElement

/// Use this to change the vertical spacing between the kicker and title
@property (nonatomic) CGFloat kickerSpacing;

/// Content insets of card card content
@property (nonatomic) UIEdgeInsets contentEdgeInset;
@property (nonatomic, weak) IBOutlet UILabel * kicker;
@property (nonatomic, weak) IBOutlet UILabel * title;
@property (nonatomic) UIView * hairline;
- (void)initialize;
- (CGSize)intrinsicContentSize;
- (void)adjustForPreferredWidth:(CGFloat)cardWidth;
- (void)update:(Card *)card;
- (CGFloat)optimizedHeight:(CGFloat)cardWidth;
- (instancetype)initWithCoder:(NSCoder *)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class WCImageView;


/// Card Body with an image and a caption under it.
SWIFT_CLASS("_TtC11WildcardSDK19ImageAndCaptionBody")
@interface ImageAndCaptionBody : CardViewElement
@property (nonatomic, weak) IBOutlet WCImageView * imageView;
@property (nonatomic, weak) IBOutlet UILabel * caption;

/// Adjusts the aspect ratio of the image view.
@property (nonatomic) CGFloat imageAspectRatio;

/// Content inset for image view and caption
@property (nonatomic) UIEdgeInsets contentEdgeInset;

/// Controls the spacing between the caption and the image
@property (nonatomic) CGFloat captionSpacing;
- (void)initialize;
- (void)update:(Card *)card;
- (void)adjustForPreferredWidth:(CGFloat)cardWidth;
- (CGSize)intrinsicContentSize;
- (CGFloat)optimizedHeight:(CGFloat)cardWidth;
- (instancetype)initWithCoder:(NSCoder *)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC11WildcardSDK18ImageFloatLeftBody")
@interface ImageFloatLeftBody : CardViewElement
@property (nonatomic, weak) IBOutlet WCImageView * imageView;
@property (nonatomic, weak) IBOutlet UILabel * descriptionLabel;

/// Content inset for all content of card body
@property (nonatomic) UIEdgeInsets contentEdgeInset;

/// Set this variable to control the image size. Do not attempt to reframe or relayout the imageView itself
@property (nonatomic) CGSize imageViewSize;
- (void)initialize;
- (void)update:(Card *)card;
- (CGFloat)optimizedHeight:(CGFloat)cardWidth;
- (void)adjustForPreferredWidth:(CGFloat)cardWidth;
- (instancetype)initWithCoder:(NSCoder *)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC11WildcardSDK19ImageFloatRightBody")
@interface ImageFloatRightBody : CardViewElement
@property (nonatomic, weak) IBOutlet WCImageView * imageView;
@property (nonatomic, weak) IBOutlet UILabel * descriptionLabel;

/// Content inset for all content of card body
@property (nonatomic) UIEdgeInsets contentEdgeInset;

/// Set this variable to control the image size. Do not attempt to reframe or relayout the imageView itself
@property (nonatomic) CGSize imageViewSize;
- (void)initialize;
- (void)update:(Card *)card;
- (CGFloat)optimizedHeight:(CGFloat)cardWidth;
- (void)adjustForPreferredWidth:(CGFloat)cardWidth;
- (instancetype)initWithCoder:(NSCoder *)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC11WildcardSDK13ImageOnlyBody")
@interface ImageOnlyBody : CardViewElement
@property (nonatomic) WCImageView * imageView;

/// Adjusts the aspect ratio of the image view.
@property (nonatomic) CGFloat imageAspectRatio;

/// Content insets
@property (nonatomic) UIEdgeInsets contentEdgeInset;
- (void)initialize;
- (void)adjustForPreferredWidth:(CGFloat)cardWidth;
- (void)update:(Card *)card;
- (CGFloat)optimizedHeight:(CGFloat)cardWidth;
- (instancetype)initWithCoder:(NSCoder *)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



/// ALPHA: The visual source of a maximized CardView
///
/// The maximized visual source should always be used with the extension UIView.maximizeCardView. This visual source is responsible for displaying a Card during its 'maximized state'. In this state, the Card takes up the entire application frame, and is owned by a fully presented view controller.
///
/// This visual source may never be used for an inline card. The size is always determined relative to the application frame using applicationFrameEdgeInsets
SWIFT_PROTOCOL("_TtP11WildcardSDK29MaximizedCardViewVisualSource_")
@protocol MaximizedCardViewVisualSource <CardViewVisualSource>

/// This represents the edge insets of the maximized CardView to the application frame.
///
/// This is essentially how inset the CardView is from the screen
- (UIEdgeInsets)applicationFrameEdgeInsets;
@end

@class UIWebView;
@class NSURLRequest;

SWIFT_CLASS("_TtC11WildcardSDK20MediaTextFullWebView")
@interface MediaTextFullWebView : CardViewElement <UIWebViewDelegate>
- (void)initialize;
- (void)update:(Card *)card;
- (BOOL)webView:(UIWebView *)webView shouldStartLoadWithRequest:(NSURLRequest *)request navigationType:(UIWebViewNavigationType)navigationType;
- (instancetype)initWithCoder:(NSCoder *)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@interface NSBundle (SWIFT_EXTENSION(WildcardSDK))

/// Gets a reference to the WildcardSDK Bundle
+ (NSBundle *)wildcardSDKBundle;
@end


@interface NSMutableAttributedString (SWIFT_EXTENSION(WildcardSDK))
@end

@class UIButton;

SWIFT_CLASS("_TtC11WildcardSDK14ReadMoreFooter")
@interface ReadMoreFooter : CardViewElement

/// Read More Button. Always left aligned at the moment.
@property (nonatomic) UIButton * readMoreButton;

/// Content insets. Right inset for this element does nothing at the moment.
@property (nonatomic) UIEdgeInsets contentEdgeInset;
- (void)initialize;
- (CGFloat)optimizedHeight:(CGFloat)cardWidth;
- (void)adjustForPreferredWidth:(CGFloat)cardWidth;
- (instancetype)initWithCoder:(NSCoder *)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



/// Most basic card body consisting of just a paragraph label
SWIFT_CLASS("_TtC11WildcardSDK23SingleParagraphCardBody")
@interface SingleParagraphCardBody : CardViewElement
@property (nonatomic) UILabel * paragraphLabel;
@property (nonatomic) UIEdgeInsets contentEdgeInset;
- (void)initialize;
- (void)adjustForPreferredWidth:(CGFloat)cardWidth;
- (void)update:(Card *)card;
- (CGFloat)optimizedHeight:(CGFloat)cardWidth;
- (instancetype)initWithCoder:(NSCoder *)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



/// Summary Card
SWIFT_CLASS("_TtC11WildcardSDK11SummaryCard")
@interface SummaryCard : Card
@property (nonatomic, readonly, copy) NSString * title;
@property (nonatomic, readonly, copy) NSString * abstractContent;
@property (nonatomic, readonly) NSDictionary * media;
@property (nonatomic, readonly) NSURL * primaryImageURL;
@property (nonatomic, readonly) NSURL * appLinkAndroid;
@property (nonatomic, readonly) NSURL * appLinkIos;
- (instancetype)initWithUrl:(NSURL *)url description:(NSString *)description title:(NSString *)title media:(NSDictionary *)media data:(NSDictionary *)data OBJC_DESIGNATED_INITIALIZER;
- (BOOL)supportsLayout:(WCCardLayout)layout;
@end


SWIFT_CLASS("_TtC11WildcardSDK32SummaryCardImageOnlyVisualSource")
@interface SummaryCardImageOnlyVisualSource : BaseVisualSource <CardViewVisualSource>
- (instancetype)initWithCard:(Card *)card aspectRatio:(CGFloat)aspectRatio OBJC_DESIGNATED_INITIALIZER;
- (CardViewElement *)viewForCardHeader;
- (CardViewElement *)viewForCardBody;
- (CardViewElement *)viewForCardFooter;
@end


SWIFT_CLASS("_TtC11WildcardSDK30SummaryCardNoImageVisualSource")
@interface SummaryCardNoImageVisualSource : BaseVisualSource <CardViewVisualSource>
- (CardViewElement *)viewForCardHeader;
- (CardViewElement *)viewForCardBody;
- (CardViewElement *)viewForCardFooter;
- (instancetype)initWithCard:(Card *)card OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC11WildcardSDK32SummaryCardShortLeftVisualSource")
@interface SummaryCardShortLeftVisualSource : BaseVisualSource <CardViewVisualSource>
- (instancetype)initWithCard:(Card *)card OBJC_DESIGNATED_INITIALIZER;
- (CardViewElement *)viewForCardHeader;
- (CardViewElement *)viewForCardBody;
- (CardViewElement *)viewForCardFooter;
@end


SWIFT_CLASS("_TtC11WildcardSDK28SummaryCardShortVisualSource")
@interface SummaryCardShortVisualSource : BaseVisualSource <CardViewVisualSource>
- (CardViewElement *)viewForCardHeader;
- (CardViewElement *)viewForCardBody;
- (CardViewElement *)viewForCardFooter;
- (instancetype)initWithCard:(Card *)card OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC11WildcardSDK27SummaryCardTallVisualSource")
@interface SummaryCardTallVisualSource : BaseVisualSource <CardViewVisualSource>
- (instancetype)initWithCard:(Card *)card aspectRatio:(CGFloat)aspectRatio OBJC_DESIGNATED_INITIALIZER;
- (CardViewElement *)viewForCardHeader;
- (CardViewElement *)viewForCardBody;
- (CardViewElement *)viewForCardFooter;
@end


@interface UIButton (SWIFT_EXTENSION(WildcardSDK))
@end


@interface UIColor (SWIFT_EXTENSION(WildcardSDK))
+ (UIColor *)wildcardDarkBlue;
+ (UIColor *)wildcardLightBlue;
+ (UIColor *)wildcardMediumGray;
+ (UIColor *)wildcardBackgroundGray;
+ (UIColor *)wildcardMediaBodyColor;
@end


@interface UIFont (SWIFT_EXTENSION(WildcardSDK))
@end


@interface UIImage (SWIFT_EXTENSION(WildcardSDK))
@end


@interface UILabel (SWIFT_EXTENSION(WildcardSDK))
@end

@class NSLayoutConstraint;
@class UIViewController;

@interface UIView (SWIFT_EXTENSION(WildcardSDK))
+ (UIView *)loadFromNibNamed:(NSString *)nibNamed;

/// For any view with a superview, constrain all edges flush with superview. e.g. Leading, Top, Bottom, Right all 0
- (void)constrainToSuperViewEdges;

/// Given a reference view, constrain this view to be exactly the same size and position (Useful for overlays that aren't child views). Superviews must be the same
- (void)constrainExactlyToView:(UIView *)view;
- (NSLayoutConstraint *)constrainLeftToSuperView:(CGFloat)offset;
- (NSLayoutConstraint *)constrainRightToSuperView:(CGFloat)offset;
- (NSLayoutConstraint *)constrainTopToSuperView:(CGFloat)offset;
- (NSLayoutConstraint *)constrainBottomToSuperView:(CGFloat)offset;
- (NSLayoutConstraint *)verticallyCenterToSuperView:(CGFloat)offset;
- (NSLayoutConstraint *)horizontallyCenterToSuperView:(CGFloat)offset;
- (NSLayoutConstraint *)constrainHeight:(CGFloat)height;
- (NSLayoutConstraint *)constrainWidth:(CGFloat)width;
- (void)constrainWidth:(CGFloat)width height:(CGFloat)height;
- (UIView *)addBlurOverlay:(UIBlurEffectStyle)style;
- (BOOL)hasSuperview;
- (UIViewController *)parentViewController;
- (UIView *)addBottomBorderWithWidth:(CGFloat)width color:(UIColor *)color;
- (UIView *)addTopBorderWithWidth:(CGFloat)width color:(UIColor *)color;
@end


@interface UIViewController (SWIFT_EXTENSION(WildcardSDK))

/// Presents a Card with a best-fit layout
- (void)presentCard:(Card *)card animated:(BOOL)animated completion:(void (^)(void))completion;

/// Presents a Card with a specific layout
- (void)presentCard:(Card *)card layout:(WCCardLayout)layout animated:(BOOL)animated completion:(void (^)(void))completion;

/// Presents a Card with a custom visual source
- (void)presentCard:(Card *)card customVisualSource:(id <CardViewVisualSource>)customVisualSource animated:(BOOL)animated completion:(void (^)(void))completion;

/// Default handling of various Card Actions by a UIViewController. Includes presenting share sheets, appstore sheets, etc.
///
/// It is recommended you use this UIViewController extension/category to handle card actions. If a UIViewController is a CardViewDelegate, you can use this function directly in cardViewRequestedAction. This is essential to making the buttons on your cards responsive.
- (void)handleCardAction:(CardView *)cardView action:(CardViewAction *)action;

/// ALPHA: Maximizes a CardView with a customized visual source
- (void)maximizeCardView:(CardView *)cardView maximizedVisualSource:(id <MaximizedCardViewVisualSource>)maximizedVisualSource;
@end



/// Video Card
SWIFT_CLASS("_TtC11WildcardSDK9VideoCard")
@interface VideoCard : Card
@property (nonatomic, readonly, copy) NSString * title;
@property (nonatomic, readonly) Creator * creator;
@property (nonatomic, readonly) NSURL * embedUrl;
@property (nonatomic, readonly, copy) NSString * abstractContent;
@property (nonatomic, readonly, copy) NSArray * keywords;
@property (nonatomic, readonly) NSURL * appLinkAndroid;
@property (nonatomic, readonly) NSURL * appLinkIos;
@property (nonatomic, readonly) NSURL * streamUrl;
@property (nonatomic, readonly, copy) NSString * streamContentType;
@property (nonatomic, readonly) NSURL * posterImageUrl;
- (instancetype)initWithTitle:(NSString *)title embedUrl:(NSURL *)embedUrl url:(NSURL *)url creator:(Creator *)creator data:(NSDictionary *)data OBJC_DESIGNATED_INITIALIZER;
- (BOOL)isYoutube;
- (BOOL)isVimeo;
- (NSString *)getYoutubeId;
- (BOOL)supportsLayout:(WCCardLayout)layout;
@end

@class WCVideoView;

SWIFT_PROTOCOL("_TtP11WildcardSDK19WCVideoViewDelegate_")
@protocol WCVideoViewDelegate
@optional
- (void)videoViewDidStartPlaying:(WCVideoView *)videoView;
- (void)videoViewWillEndPlaying:(WCVideoView *)videoView;
- (void)videoViewTapped:(WCVideoView *)videoView;
@end



/// A Card Body which can play various Video Cards
SWIFT_CLASS("_TtC11WildcardSDK13VideoCardBody")
@interface VideoCardBody : CardViewElement <WCVideoViewDelegate>
@property (nonatomic) WCVideoView * videoView;

/// Adjusts the aspect ratio of the video
@property (nonatomic) CGFloat videoAspectRatio;

/// Content insets
@property (nonatomic) UIEdgeInsets contentEdgeInset;
- (void)initialize;
- (void)adjustForPreferredWidth:(CGFloat)cardWidth;
- (void)update:(Card *)card;
- (CGFloat)optimizedHeight:(CGFloat)cardWidth;
- (void)videoViewTapped:(WCVideoView *)videoView;
- (void)videoViewDidStartPlaying:(WCVideoView *)videoView;
- (void)videoViewWillEndPlaying:(WCVideoView *)videoView;
- (instancetype)initWithCoder:(NSCoder *)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC11WildcardSDK25VideoCardShortImageSource")
@interface VideoCardShortImageSource : BaseVisualSource <CardViewVisualSource>
- (CardViewElement *)viewForCardHeader;
- (CardViewElement *)viewForCardBody;
- (instancetype)initWithCard:(Card *)card OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC11WildcardSDK19ViewOnWebCardFooter")
@interface ViewOnWebCardFooter : CardViewElement
@property (nonatomic) UIButton * viewOnWebButton;
@property (nonatomic) UIButton * shareButton;
@property (nonatomic) UIView * hairline;
@property (nonatomic) UIEdgeInsets contentEdgeInset;
- (void)initialize;
- (void)adjustForPreferredWidth:(CGFloat)cardWidth;
- (CGFloat)optimizedHeight:(CGFloat)cardWidth;
- (instancetype)initWithCoder:(NSCoder *)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



/// Wildcard Extension of UIImageView with a few extra functions
SWIFT_CLASS("_TtC11WildcardSDK11WCImageView")
@interface WCImageView : UIImageView

/// Default cross fade animation duration when setting an image
@property (nonatomic) NSTimeInterval crossFadeDuration;

/// Set image to URL and automatically set the image
- (void)setImageWithURL:(NSURL *)url mode:(UIViewContentMode)mode;

/// Set image to URL with a completion block. This does not automatically set the image -- more suitable for re-use scenarios
- (void)setImageWithURL:(NSURL *)url mode:(UIViewContentMode)mode completion:(void (^)(UIImage *, NSError *))completion;

/// Set the default place holder image, use this when there was a problem downloading or loading an image
- (void)setNoImage;

/// Cancel any pending image requests
- (void)cancelRequest;

/// Set image with a content mode. Does a cross fade animation by default
- (void)setImage:(UIImage *)image mode:(UIViewContentMode)mode;
- (instancetype)initWithImage:(UIImage *)image OBJC_DESIGNATED_INITIALIZER;
- (instancetype)initWithImage:(UIImage *)image highlightedImage:(UIImage *)highlightedImage OBJC_DESIGNATED_INITIALIZER;
- (instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (instancetype)initWithCoder:(NSCoder *)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end

@class UIGestureRecognizer;
@class WKWebView;
@class WKNavigation;
@class WKUserContentController;
@class WKScriptMessage;
@class YTPlayerView;


/// Plays content from a Video Card
SWIFT_CLASS("_TtC11WildcardSDK11WCVideoView")
@interface WCVideoView : UIView <WKNavigationDelegate, UIGestureRecognizerDelegate, WKScriptMessageHandler, YTPlayerViewDelegate>
@property (nonatomic) VideoCard * videoCard;
@property (nonatomic) id <WCVideoViewDelegate> delegate;
- (BOOL)gestureRecognizer:(UIGestureRecognizer *)gestureRecognizer shouldRecognizeSimultaneouslyWithGestureRecognizer:(UIGestureRecognizer *)otherGestureRecognizer;
- (void)webView:(WKWebView *)webView didCommitNavigation:(WKNavigation *)navigation;
- (void)webView:(WKWebView *)webView didFinishNavigation:(WKNavigation *)navigation;
- (void)webView:(WKWebView *)webView didFailNavigation:(WKNavigation *)navigation withError:(NSError *)error;
- (void)webView:(WKWebView *)webView didFailProvisionalNavigation:(WKNavigation *)navigation withError:(NSError *)error;
- (void)userContentController:(WKUserContentController *)userContentController didReceiveScriptMessage:(WKScriptMessage *)message;
- (void)playerView:(YTPlayerView *)playerView receivedError:(YTPlayerError)error;
- (void)playerViewDidBecomeReady:(YTPlayerView *)playerView;
- (void)playerView:(YTPlayerView *)playerView didChangeToState:(YTPlayerState)state;
- (instancetype)initWithCoder:(NSCoder *)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (void)awakeFromNib;
@end


@class NSOperationQueue;


/// Global convenience settings
SWIFT_CLASS("_TtC11WildcardSDK11WildcardSDK")
@interface WildcardSDK

/// Custom font for Card titles
+ (UIFont *)cardTitleFont;
+ (void)setCardTitleFont:(UIFont *)newValue;

/// Custom font for Card kickers
+ (UIFont *)cardKickerFont;
+ (void)setCardKickerFont:(UIFont *)newValue;

/// Custom font for Card descriptions
+ (UIFont *)cardDescriptionFont;
+ (void)setCardDescriptionFont:(UIFont *)newValue;

/// Custom font for Card Action Buttons
+ (UIFont *)cardActionButtonFont;
+ (void)setCardActionButtonFont:(UIFont *)newValue;

/// Card Corner Radius
+ (CGFloat)cardCornerRadius;
+ (void)setCardCornerRadius:(CGFloat)newValue;

/// Delegate queue for network request callbacks
+ (NSOperationQueue *)networkDelegateQueue;
+ (void)setNetworkDelegateQueue:(NSOperationQueue *)newValue;

/// Custom corner radius for images shown in cards
+ (CGFloat)imageCornerRadius;
+ (void)setImageCornerRadius:(CGFloat)newValue;

/// This value is used to calculate a default preferred width for a CardView if none is explicilty given.
+ (CGFloat)defaultScreenMargin;
+ (void)setDefaultScreenMargin:(CGFloat)newValue;

/// Initialize the SDK
+ (void)initializeWithApiKey:(NSString *)key;
@end

#pragma clang diagnostic pop
